#!/usr/bin/env python
import argparse
import logging

from libyear.export_format.export_format import Format, Item
from libyear.export_format.factory import get_formatter
from libyear.pypi import get_lib_days
from libyear.utils import load_requirements, get_requirement_files, get_requirement_name_and_version, calculate_libyear

logger = logging.getLogger(__name__)


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('-r', help="Requirements file/path", action='store')
    parser.add_argument('--sort', help="Sort by years behind, in descending order", action='store_true')
    parser.add_argument('--format', help="Specify the format to export the result", action='store',
                        default=Format.ASCII)

    args = parser.parse_args()

    requirements = set()
    for req_file in get_requirement_files(args.r):
        requirements.update(load_requirements(req_file))

    formatter = get_formatter(args.format)
    formatter.initialize(sort=args.sort)

    total_days = 0
    for req in requirements:
        name, version, version_lt = get_requirement_name_and_version(req)
        if not name or (not version and not version_lt):
            continue

        v, lv, days = get_lib_days(name, version, version_lt)
        if v and days > 0:
            item = Item(name=name, version=v, latest_version=lv, libyear=calculate_libyear(days=days))
            formatter.add_item(item=item)

        total_days += days

    if total_days == 0:
        print("Your system is up-to-date!")
        return

    formatter.end(days=total_days)
    formatter.print()


if __name__ == "__main__":
    main()
